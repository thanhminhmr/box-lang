
u32[] _hey() {}

Tuple(u8 .a, u8 .b); // define tuple Tuple
Tuple a; // define variable a type
Tuple _run(){}


u32 _fibonacci(u32 $index) {
    return $index == 0i
            ? 0i
            : $index == 1i
            ? 1i
            : _fibonacci($index - 1i) + _fibonacci($index - 2i);
}

u32 _fibonacci(u32 $index) {
    if ($index == 0i) return 0i;
    if ($index == 1i) return 1i;
    u32 i = 1i, a = 0i, b = 1i;
    loop {
        u32 c = a + b;
        a = b;
        b = c;
    	i += 1i;
        if (i == $index) return b;
    }
}

u32[] _fibonacci(u32 $size) {
    u32[] array = u32:[$size]; // init to zero
    if ($size <= 1i) return array;
    u32 i = 1i, a = 0i, b = 1i;
    loop {
    	array[i] = b;
    	u32 c = a + b;
    	a = b;
    	b = c;
    	i += 1i;
        if (i == $size) return array;
    }
}
